/// Set property to some size value based on base line height
/// For instance:
///     @include rhythm(margin-bottom, 1)
/// will add a margin-bottom 
/// @param {string}     $property Property to set, e.g. `margin-bottom`
/// @param {int | list} $steps    Number of lines to use in measurement
/// @param {dist}       $offset   Measurement to subtract from property value
///                               (to offset, for instance, border widths)
/// @group Typography
///
/// @example scss - Sass
/// .element {
///   @include rhythm(padding, 0 1);
///   @include rhythm(margin-bottom, 1);
///   @include rhythm(margin-top, 1, -2px);
/// }
///
/// @example css - Output
/// .element {
///   padding:  0px 22.4px;
///   padding:  0rem 1.4rem;
///   margin-bottom:  22.4px;
///   margin-bottom:  1.4rem;
///   margin-top:  calc(22.4px - 2px);
///   margin-top:  calc(1.4rem - 2px);
/// }

@mixin _calc-props($property, $steps, $line-height, $offset) {
	$px-value: '';
	$rem-value: '';
	$em-base: 16px !default;

	@each $step in $steps {
		@if type-of($step) == 'string' {
			$px-value: #{$px-value} $step;
			$rem-value: #{$rem-value} $step;
		}

		@else {
			@if $offset > 0 {
				$px-value  : #{$px-value} calc(#{$line-height * $step * $em-base} - #{$offset});
				$rem-value : #{$rem-value} calc(#{$step * $line-height}rem - #{$offset});
			}

			@else {
				$px-value  : #{$px-value} $line-height * $step * $em-base;
				$rem-value : #{$rem-value} #{$step * $line-height}rem;
			}
		}
	}

	#{$property}: $px-value;
	#{$property}: $rem-value;
}

@mixin rhythm($property, $steps: 1, $offset: 0) {

	$base-line-height: 1.4 !default;
	$line-height: $base-line-height;

	@include _calc-props($property, $steps, $line-height, $offset);

	@if $responsive-line-heights {
		@each $lh in $responsive-line-heights {
			@media all and (#{nth($lh, 1)}) {
				$line-height: nth($lh, 2);

				@include _calc-props($property, $steps, $line-height, $offset);
			}
		}
	}
}
