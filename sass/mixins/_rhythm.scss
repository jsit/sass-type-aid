/// Set property to some size value based on base line height
/// For instance:
///     @include rhythm(margin-bottom, 1)
/// will add a margin-bottom 
/// @param {string} $property Property to set, e.g. `margin-bottom`
/// @param {number} $steps    Number of lines to use in measurement
/// @param {number} $offset   Measurement to subtract from property value
///                           (to offset, for instance, border widths)
/// @group 2typography
///
/// @example scss - Sass
/// .element {
///   @include rhythm(padding, 0 1);
///   @include rhythm(margin-bottom, 1);
///   @include rhythm(margin-top, 1, -2px);
/// }
///
/// @example css - Output
/// .element {
///   padding:  0px 22.4px;
///   padding:  0rem 1.4rem;
///   margin-bottom:  22.4px;
///   margin-bottom:  1.4rem;
///   margin-top:  calc(22.4px - 2px);
///   margin-top:  calc(1.4rem - 2px);
/// }
@mixin rhythm($property, $steps: 1, $offset: 0) {

	$px-value: '';
	$rem-value: '';

	$px-value  : #{$px-value} $base-line-height * $steps * $em-base + $offset;

	@if $offset != 0 {
		$rem-value : #{$rem-value} calc(#{$steps * $base-line-height}rem + #{$offset});
	} @else {
		$rem-value : #{$rem-value} #{$steps * $base-line-height}rem;
	}

	#{$property}: $px-value;
	#{$property}: $rem-value;

}
